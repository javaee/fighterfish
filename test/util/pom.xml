<?xml version="1.0" encoding="UTF-8"?>
<!--

    DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

    Copyright (c) 2011-2013 Oracle and/or its affiliates. All rights reserved.

    The contents of this file are subject to the terms of either the GNU
    General Public License Version 2 only ("GPL") or the Common Development
    and Distribution License("CDDL") (collectively, the "License").  You
    may not use this file except in compliance with the License.  You can
    obtain a copy of the License at
    https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html
    or packager/legal/LICENSE.txt.  See the License for the specific
    language governing permissions and limitations under the License.

    When distributing the software, include this License Header Notice in each
    file and include the License file at packager/legal/LICENSE.txt.

    GPL Classpath Exception:
    Oracle designates this particular file as subject to the "Classpath"
    exception as provided by Oracle in the GPL Version 2 section of the License
    file that accompanied this code.

    Modifications:
    If applicable, add the following below the License Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyright [year] [name of copyright owner]"

    Contributor(s):
    If you wish your version of this file to be governed by only the CDDL or
    only the GPL Version 2, indicate your decision by adding "[Contributor]
    elects to include this software in this distribution under the [CDDL or GPL
    Version 2] license."  If you don't indicate a single choice of license, a
    recipient has the option to distribute your version of this file under
    either the CDDL, the GPL Version 2 or to extend the choice of license to
    its licensees as provided above.  However, if you add GPL Version 2 code
    and therefore, elected the GPL Version 2 license, then the option applies
    only if the new code is made subject to such option by the copyright
    holder.

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>net.java</groupId>
        <artifactId>jvnet-parent</artifactId>
        <version>3</version>
    </parent>
    <!--
    TODO: There is a lot of common configuration between this POM and POM of test/it. So,
    we should have a common parent pom for all.
    -->
    <groupId>org.glassfish.fighterfish</groupId>
    <artifactId>test.util</artifactId>
    <version>1.1.8-SNAPSHOT</version>
    <name>A junit extension which helps writing test cases involving GlassFish/Maven/JUnit/PAX-EXAM easier</name>
    <description>
        This is a small junit extension developed in FighterFish project to make the task of writing
        test cases using maven/glassfish/junit much easier. It in turn leverages pax-exam test framework.
    </description>
    <scm>
        <connection>scm:svn:https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util</connection>
        <developerConnection>scm:svn:https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util
        </developerConnection>
        <url>https://svn.java.net/svn/glassfish~svn/trunk/fighterfish/test/util</url>
    </scm>
    <build>
        <!-- This or a subset of it should go to a higher level pom -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.3.2</version>
                    <configuration>
                        <source>1.6</source>
                        <target>1.6</target>
                    </configuration>
                </plugin>
                <plugin>
                    <!-- Configure maven-bundle-plugin to generate OSGi manifest. Please
                            note: we use the manifest goal only and not the bundle goal. The bundle goal
                            can lead to very surprising results if the package names are not correctly
                            specified. So, we use the jar plugin to generate the jar. -->
                    <groupId>org.apache.felix</groupId>
                    <artifactId>maven-bundle-plugin</artifactId>
                    <version>2.3.4</version>
                    <configuration>
                        <!-- By default, we don't export anything. -->
                        <Export-Package />
                        <!-- Since, we are in a top level pom and we we don't want it to be
                                 active for plain jar type artifacts, enable the plugin for hk2-jar and bundle
                                 packaging type only, -->
                        <supportedProjectTypes>
                            <supportedProjectType>jar</supportedProjectType>
                        </supportedProjectTypes>
                        <instructions>
                            <!-- Read all the configuration from osgi.properties file, if it exists.
                                      See Felix-699 to find out why we use ${basedir}. -->
                            <_include>-${basedir}/osgi.properties</_include>
                        </instructions>
                    </configuration>
                    <executions>
                        <execution>
                            <id>bundle-manifest</id>
                            <phase>process-classes</phase>
                            <goals>
                                <goal>manifest</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>2.3.2</version>
                    <configuration>
                        <archive>
                            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF
                            </manifestFile>
                        </archive>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>2.12.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.10</version>
                </plugin>
                <!--
                We can't enable tests while doing a release, because one of our test tries to install itself
                and that fails to resolve the artifact from repo.
                The profile jvnet-release is what is mentioned in parent pom. gpg plugin is enabled in that profile.
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>2.4</version>
                    <configuration>
                        <arguments>-Pjvnet-release -DskipTests=true -Dgpg.passphrase=${gpg.passphrase}</arguments>
                        <tagBase>https://svn.java.net/svn/glassfish~svn/tags/fighterfish-releases</tagBase>
                        <tagNameFormat>@{project.groupId}.@{project.artifactId}-@{project.version}</tagNameFormat>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.felix</groupId>
                <artifactId>maven-bundle-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!--
                    Maven chooses to make provided dependencies part of test classpath.
                    The javaee-api and javaee-web-api jars can't be used in runtime, for they
                    don't contain proper classes, so we exclude them from test classpath.
                    -->
                    <classpathDependencyExcludes>
                        <classpathDependencyExcludes>javax:javaee-web-api
                        </classpathDependencyExcludes>
                    </classpathDependencyExcludes>
                </configuration>
            </plugin>
            <!--
            Let's configure fail-safe plugin to execute integration tests for this module
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                </executions>
                <configuration>
                    <systemPropertyVariables>
                        <!-- This is what is used by Derby Embedded Driver to decide where to keep the derby log messages -->
                        <derby.stream.error.file>${project.build.directory}/derby.log</derby.stream.error.file>
                        <!-- This is needed for pax-url-mvn to read custom settings.xml.
                             pax-url-mvn tries to locate settings.xml in ~/.m2 or in ${maven.home}/conf
                        -->
                        <user.home>${user.home}</user.home>
                        <!-- This is needed for pax-url-mvn to reads custom settings.xml.
                             pax-url-mvn tries to locate settings.xml in ~/.m2 or in ${maven.home}/conf
                        -->
                        <maven.home>${maven.home}</maven.home>
                    </systemPropertyVariables>
                    <!--
                    Maven chooses to make provided dependencies part of test classpath.
                    The javaee-api and javaee-web-api jars can't be used in runtime, for they
                    don't contain proper classes, so we exclude them from test classpath.
                    -->
                    <classpathDependencyExcludes>
                        <classpathDependencyExcludes>javax:javaee-web-api
                        </classpathDependencyExcludes>
                    </classpathDependencyExcludes>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>org.glassfish</groupId>
            <artifactId>simple-glassfish-api</artifactId>
            <version>3.1.1</version>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.8.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.compendium</artifactId>
            <version>4.2.0</version>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam</artifactId>
            <version>${pax-exam.version}</version>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-junit4</artifactId>
            <version>${pax-exam.version}</version>
        </dependency>
        <dependency>
            <!-- Having this dependency instructs pax-exam to use in-process OSGi
                   runtime -->
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-container-native</artifactId>
            <version>${pax-exam.version}</version>
        </dependency>
        <!-- Starting with pax-exam 2.2.0, native container requires pax-exam-link-assembly
              and pax-url-aether to be provisioned as well while using mvn protocol. -->
        <dependency>
            <groupId>org.ops4j.pax.exam</groupId>
            <artifactId>pax-exam-link-assembly</artifactId>
            <version>${pax-exam.version}</version>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.url</groupId>
            <artifactId>pax-url-aether</artifactId>
            <version>1.3.3</version>
        </dependency>
        <!-- pax-exam uses slf4j. We need to provide a binding for the same here. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.6.1</version>
        </dependency>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>6.0</version>
            <scope>provided</scope>
            <optional>true</optional>
        </dependency>
        <!--
        api and simplewab are two sample bundles provisioned by the tests.
        -->
        <dependency>
            <groupId>org.glassfish.fighterfish</groupId>
            <artifactId>sample.uas.api</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.glassfish.fighterfish</groupId>
            <artifactId>sample.uas.simplewab</artifactId>
            <version>1.0.0</version>
            <scope>test</scope>
            <type>war</type>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient-osgi</artifactId>
            <version>4.2.4</version>
        </dependency>
    </dependencies>

    <!--
    We want to run the tests multiple times with different settings like with an existing GlassFish
    installation, without an installation, with Felix and Equinox, etc. So, we create multiple
    test executions.
    -->
    <profiles>
        <profile>
            <id>ToolsJar</id>
            <activation>
                <os>
                    <family>!mac</family>
                </os>
            </activation>
            <dependencies>
                <!-- Add tools.jar to classpath as required by GlassFish. See ASMainHelper#createOSGiFrameworkLauncherCL -->
                <dependency>
                    <groupId>com.sun</groupId>
                    <artifactId>tools</artifactId>
                    <version>${java.version}</version>
                    <scope>system</scope>
                    <systemPath>${java.home}/../lib/tools.jar</systemPath>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <id>Felix</id>
            <activation>
                <!-- We can't use activeByDefault, as such a profile is not selected when any other profile is selected
                     because of explicit user request or because of activation rule.
                     We don't want everyone to pass -PFelix either. So, we activate it using a rule
                     which will always match. If you want this profile to be inactive (e.g. when running
                     using Equinox), then you have to pass -P-Felix.
                -->
                <jdk>[1.6,1000)</jdk>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>org.apache.felix.framework</artifactId>
                    <scope>test</scope>
                    <version>${felix.version}</version>
                </dependency>
            </dependencies>
            <properties>
                <GlassFish_Platform>Felix</GlassFish_Platform>
            </properties>
        </profile>

        <profile>
            <id>Equinox</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.sonatype.tycho</groupId>
                    <artifactId>org.eclipse.osgi</artifactId>
                    <version>${equinox.version}</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <properties>
                <GlassFish_Platform>Equinox</GlassFish_Platform>
            </properties>
        </profile>

        <profile>
            <id>SunJVM</id>
            <activation>
                <property>
                    <name>java.vm.name</name>
                    <value>Java HotSpot(TM) Server VM</value>
                </property>
            </activation>
            <properties>
                <argLine>-XX:MaxPermSize=256m</argLine>
            </properties>
        </profile>

        <profile>
            <id>IBM-J9-VM</id>
            <activation>
                <property>
                    <name>java.vm.name</name>
                    <value>IBM J9 VM</value>
                </property>
            </activation>
            <properties>
                <argLine>-XX:MaxPermSize=256m -Xverify:none</argLine>
            </properties>
        </profile>

        <!--
        In this profile, the test framework downloads and installs glassfish and uses it to run tests.
        The location to download glassfish can be overridden via a property called fighterfish.provisioner.url.
        -->
        <profile>
            <id>TestWithoutInstallation</id>
            <activation>
                <!--
                See Felix profile to undertstand why we use this activation policy.
                -->
                <jdk>[1.6,1000)</jdk>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>TestWithoutInstallation</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <fighterfish.provisioner.url>${fighterfish.provisioner.url}</fighterfish.provisioner.url>
                                        <org.osgi.framework.storage>
                                            ${project.build.directory}/osgi-cache/${GlassFish_Platform}/TestWithoutInstallation
                                        </org.osgi.framework.storage>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!--
        In this profile, it is NOT the responsibility of test framework to install glassfish.
        So, we use maven-dependency-plugin:unpack to install glassfish in target dir and pass its
        location to test framework via com.sun.aas.installRoot property.
        We have hard coded the version of glassfish to install,
        because the purpose of this profile is to make sure that this utility can use an existing installation.
        If we want to test compatibility with various gf versions, we can easily
        do that using TestWithoutInstallation profile by overriding fighterfish.provisioner.url.
        -->
        <profile>
            <id>TestWithInstallation</id>
            <activation>
                <!--
                See Felix profile to undertstand why we use this activation policy.
                -->
                <jdk>[1.6,1000)</jdk>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>install-glassfish</id>
                                <goals>
                                    <goal>unpack</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.glassfish.main.distributions</groupId>
                                            <artifactId>glassfish</artifactId>
                                            <version>3.1.2.2</version>
                                            <type>zip</type>
                                        </artifactItem>
                                    </artifactItems>
                                    <outputDirectory>
                                        ${project.build.directory}/stages/
                                    </outputDirectory>
                                    <overWriteReleases>true</overWriteReleases>
                                    <overWriteSnapshots>true</overWriteSnapshots>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>TestWithInstallation</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <systemPropertyVariables>
                                        <com.sun.aas.installRoot>
                                            ${project.build.directory}/stages/glassfish3/glassfish
                                        </com.sun.aas.installRoot>
                                        <org.osgi.framework.storage>
                                            ${project.build.directory}/osgi-cache/${GlassFish_Platform}/TestWithInstallation
                                        </org.osgi.framework.storage>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>Debug</id>
            <properties>
                <maven.failsafe.debug>-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009</maven.failsafe.debug>
                <maven.surefire.debug>-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009</maven.surefire.debug>
            </properties>
        </profile>
    </profiles>
    <properties>
        <!-- The version of pax-exam being used. I have tested test.util bundle
              with 2.3.0 only, so, let's stick to this version for now. -->
        <pax-exam.version>2.3.0</pax-exam.version>
        <fighterfish.provisioner.url>mvn:org.glassfish.main.distributions/glassfish/3.1.2.2/zip</fighterfish.provisioner.url>
        <felix.version>3.0.8</felix.version>
        <equinox.version>3.6.2.R36x_v20110210</equinox.version>
    </properties>
</project>
